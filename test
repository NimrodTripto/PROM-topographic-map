import numpy as np
import matplotlib.pyplot as plt

# Example contour data: Replace this with actual data
contour = np.array([[1, 1], [2, 2], [3, 1], [4, 0], [3, -1], [2, -2], [1, -1]])

# Step 1: Convert to Polar Coordinates
def to_polar(x, y):
    r = np.sqrt(x**2 + y**2)
    theta = np.arctan2(y, x)
    return r, theta

r, theta = to_polar(contour[:, 0], contour[:, 1])

# Step 2: Calculate Curvature in Polar Coordinates
def calculate_curvature_polar(r, theta):
    dr_dt = np.gradient(r)
    dtheta_dt = np.gradient(theta)
    ds_dt = np.sqrt(dr_dt**2 + (r * dtheta_dt)**2)
    dr_dtheta = np.gradient(r, dtheta_dt)
    curvature = (r**2 + 2*(dr_dt)**2 - r*dr_dtheta) / (r**2 + dr_dt**2)**(3/2)
    return curvature

curvature = calculate_curvature_polar(r, theta)

# Step 3: Analyze Curvature Direction
def analyze_closure_direction(curvature):
    positive_curvature = curvature[curvature > 0]
    negative_curvature = curvature[curvature < 0]
    if np.sum(positive_curvature) > np.sum(negative_curvature):
        return 'Closes to the left'
    else:
        return 'Closes to the right'

direction = analyze_closure_direction(curvature)

# Plotting for visualization
plt.figure(figsize=(10, 8))
plt.plot(contour[:, 0], contour[:, 1], label='Original Contour')
plt.title(f'Contour Analysis - {direction}')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()

print(direction)